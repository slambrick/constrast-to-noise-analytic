# Save the basic data frame to a text file
df_signal %>% write_csv("aperture_signal_data.csv")
} else {
#As the calculation takes a minute an alternative is to import previously
#calculated data.
df_signal <- read_csv("aperture_signal_data.csv", show_col_types = FALSE)
}
df_signal %<>% mutate(SNR = sqrt(I))
df_signal %<>% mutate(SNR = if_else(is.nan(SNR), 0, SNR))
# Plot of the signal as a contour plot and heatmap
plt_contour <- df_signal %>%
ggplot(aes(x = beta, y = psi)) +
geom_raster(aes(fill = I), interpolate = TRUE) +
geom_contour(aes(z = I), colour = "white", size = 0.5, binwidth = 10) +
geom_vline(aes(xintercept = present_half_cone), colour = "firebrick1") +
scale_fill_viridis() +
scale_x_continuous(breaks = c(0,20,40,60,80,90)) +
scale_y_continuous(breaks = c(0,20,40,60,80,100,120,140,160,180)) +
coord_fixed(expand = FALSE) +
xlab(expression("Half cone angle/"*degree)) +
ylab(expression("Surface angle/"*degree)) +
labs(fill = "Signal") +
theme(text = element_text(size = 9), legend.position = "top")
print(plt_contour)
df1 <- df_signal %>% filter(beta == 10) %>% mutate(I = I/max(I))
df2 <- df_signal %>% filter(beta == 45) %>% mutate(I = I/max(I))
df3 <- bind_rows(df1, df2)
df3 %<>% mutate(beta = as.factor(beta))
plt_options <- df3 %>% ggplot(aes(x = psi, y = I, colour = beta)) +
geom_line(linewidth=1) +
#  scale_fill_manual(values = as.factor(c(10, 45)), labels = c(expression('10'*degree), expression('45'*degree))) +
scale_colour_colorblind(name = 'Î²') +
labs(x = expression(psi*'/'*degree), y="Normalised intensity") +
theme(legend.position = c(0.87, 0.73),
text = element_text(size = 9),
aspect.ratio = 2/(1+sqrt(5)))
plt_options
if (save_tex) {
plt_options <- plt_options +
xlab("$\\psi/^\\circ$") +
scale_colour_colorblind(name = '$\\beta$')
tikz("C:/Users/SamLambrick/Documents/SMF_research_work/figure_making_reports/constrast-to-noise-analytic/signal_aperture_size_line.tex", standAlone = FALSE, width = 3.278, height = 2.2)
print(plt_options)
dev.off()
}
# Plot of the signal to noise ratio as a contour plot and heatmap
plt_contour_SNR <- df_signal %>%
ggplot(aes(x = beta, y = psi)) +
geom_raster(aes(fill = SNR), interpolate = TRUE) +
geom_contour(aes(z = SNR), colour = "white", size = 0.5, binwidth = 1) +
geom_vline(aes(xintercept = present_half_cone), colour = "firebrick1") +
scale_fill_viridis() +
scale_x_continuous(breaks = c(0,20,40,60,80,90)) +
scale_y_continuous(breaks = c(0,20,40,60,80,100,120,140,160,180)) +
coord_fixed(expand = FALSE) +
xlab(expression("Half cone angle/"*degree)) +
ylab(expression("Surface angle/"*degree)) +
labs(fill = "SNR") +
theme(text = element_text(size = 9), legend.position = "top")
print(plt_contour_SNR)
rs = seq(0, 2, by = 0.1)
I <- rep(0, length(rs))
for (i in seq(1, length(rs))) {
I[i] = intensityRadius(45*pi/180, rs[i], 3)
}
I <- I/intensityRadius(45*pi/180, 0.5, 3)
df_signal2 <- tibble(rs, I)
plt_radius <- df_signal2 %>% ggplot(aes(x = rs, y = I)) +
geom_line() +
geom_vline(aes(xintercept = 0.5), colour = colorblind_pal()(2)[2]) +
labs(x = "Aperture radius/mm", y = "Signal") +
theme(text = element_text(size = 9))
print(plt_radius)
if (save_plots) {
ggsave("signal_aperture.eps", plt_contour, width = 2.354, height = 5)
ggsave("SNR_aperture.eps", plt_contour_SNR, width = 2.354, height = 5)
ggsave("signal_aperture.png", plt_contour, width = 2.354, height = 5)
ggsave("SNR_aperture.png", plt_contour_SNR, width = 2.354, height = 5)
ggsave("signal_aperture_mm.eps", plt_radius, width = 3, height = 2)
ggsave("signal_aperture_mm.png", plt_radius, width = 3, height = 2)
ggsave("C:/Users/SamLambrick/Documents/SMF_research_work/figure_making_reports/constrast-to-noise-analytic/signal_aperture_size_line.eps", plt_options, width = 3.287, height = 2.6)
ggsave("C:/Users/SamLambrick/Documents/SMF_research_work/figure_making_reports/constrast-to-noise-analytic/signal_aperture_size_line.png", plt_options, width = 3.287, height = 2.6)
}
if (save_tex) {
plt_contour <- plt_contour +
xlab("Half cone angle/$^\\circ$") +
ylab("Surface angle/$^\\circ$") +
theme(text = element_text(size = 9))
tikz("2Dplot.tex", standAlone = FALSE, width = 2.354, height = 5)
print(plt_contour)
dev.off()
plt_contour_SNR <- plt_contour_SNR +
xlab("Half cone angle/$^\\circ$") +
ylab("Surface angle/$^\\circ$") +
theme(text = element_text(size = 9))
tikz("2Dplot_SNR.tex", standAlone = FALSE, width = 2.354, height = 5)
print(plt_contour_SNR)
dev.off()
tikz("signal_aperture_mm.tex", standAlone = FALSE, width = 3, height = 2)
print(plt_radius)
dev.off()
}
betas <- seq(1, 20)
I_circ <- rep(0, length(betas))
I_ellip <- rep(0, length(betas))
for (i in seq(1, length(betas))){
I_circ[i] <- intensityAnl(45*pi/180, betas[i]*pi/180)
I_ellip[i] <- intensityElliptical(45*pi/180, betas[i]*pi/180, betas[i]*pi/180)
}
df_ellipTest <- tibble(betas, I_circ, I_ellip)
plt_test <- df_ellipTest %>% pivot_longer(!betas, names_to = "Model", values_to = "I") %>%
ggplot(aes(x = betas, y = I, linetype = Model, colour = Model)) +
geom_line() +
scale_color_colorblind() +
theme(text = element_text(size = 9))
print(plt_test)
# Current solid angle
current_omega <- omegaEllipseBeta(10*pi/180, 10*pi/180)
# Range of angles in one of the dimensions
beta_a <- c(2, 3, 5, 10)
# Calculate the  values of the other half cone angle
beta_b <- rep(0, length(beta_a))
for (i in seq(1, length(beta_a))) {
beta_tmp <- seq(1, 89, by=0.2)
omegas <- rep(0, length(beta_tmp))
for (j in seq(1, length(beta_tmp))) {
omegas[j] <- omegaEllipseBeta(beta_a[i]*pi/180, beta_tmp[j]*pi/180)
}
tmp_fun <- approxfun(omegas, beta_tmp)
beta_b[i] <- tmp_fun(current_omega)
}
# Check the solid angles calculated
omegas <- rep(0, length(beta_a))
for (i in seq(1, length(beta_a))) {
omegas[i] <- omegaEllipseBeta(beta_a[i]*pi/180, beta_b[i]*pi/180)
}
print("Fractional range of the resulting values:")
print(diff(range(omegas))/mean(omegas))
df_elliptical <- tibble(beta_a=NA, beta_b=NA, psi=NA, I=NA)
psis <- seq(0, 90)
for (i in seq(1, length(beta_a))) {
Is <- rep(0, length(psis))
for (j in seq(1, length(Is))) {
Is[j] <- intensityElliptical(psis[j]*pi/180, beta_a[i]*pi/180, beta_b[i]*pi/180)
}
df_elliptical <- bind_rows(df_elliptical, tibble(psi=psis, beta_a=beta_a[i],
beta_b=beta_b[i], I = Is))
}
# Remove the first row that are NA's
df_elliptical <- df_elliptical[-1,]
df_elliptical %<>% mutate(aspect_ratio = beta_b/beta_a)
plt_elliptical <- df_elliptical %>%
mutate(aspect_ratio = as_factor(round(df_elliptical$aspect_ratio)),
I = I/max(I)) %>%
ggplot(aes(x = psi, y = I, colour = aspect_ratio))  +
geom_line() +
scale_color_colorblind() +
labs(x = "$\\psi^\\circ$", y = "Relative signal") +
guides(colour=guide_legend(nrow=1)) +
scale_x_continuous(breaks = c(0,20,40,60,80,90)) +
xlim(0, 90) +
ylim(c(0, 1)) +
theme(legend.position = "top",
legend.title = element_blank(),
text = element_text(size = 9))
print(plt_elliptical)
psi <- seq(0, 110)
I <- rep(0, length(psi))
IMC <- rep(0, length(psi))
for (i in seq(1, length(psi))) {
I[i] <- intensityElliptical(psi[i]*pi/180, 10*pi/180, 10*pi/180)
IMC[i] <- intensityEllipticalMC(psi[i]*pi/180, 10*pi/180, 10*pi/180, 100000)
}
df_elliptical_tmp <- tibble(psi=psi, Int=I/max(I), MC=IMC/max(I))
df_elliptical_tmp %>% pivot_longer(!psi, names_to = "Model", values_to = "signal") %>%
ggplot(aes(x=psi, y=signal, colour=Model)) +
geom_line() +
scale_colour_colorblind() +
ylim(0, 1)
if (FALSE) {
df_elliptical2 <- tibble(beta_a=NA, beta_b=NA, psi=NA, I=NA)
psis <- seq(0, 135, by=1.5)
for (i in seq(1, length(beta_a))) {
Is <- rep(0, length(psis))
for (j in seq(1, length(Is))) {
Is[j] <- intensityEllipticalMC(psis[j]*pi/180, beta_b[i]*pi/180, beta_a[i]*pi/180, 10000000)
}
df_elliptical2 <- bind_rows(df_elliptical2, tibble(psi=psis, beta_a=beta_a[i],
beta_b=beta_b[i], I = Is))
}
# Remove the first row that are NA's
df_elliptical2 <- df_elliptical2[-1,]
df_elliptical2 %<>% mutate(aspect_ratio = beta_b/beta_a)
df_elliptical2 %>% write_csv("elliptical_long_data.csv")
} else {
# Alternativly load the data from a data file because the computation takes time.
df_elliptical2 <- read_csv("elliptical_long_data.csv", show_col_types = FALSE)
}
plt_elliptical2 <- df_elliptical2 %>%
mutate(aspect_ratio = as_factor(round(aspect_ratio)),
I = I/max(I)) %>%
ggplot(aes(x = psi, y = I, colour = aspect_ratio))  +
#geom_line() +
geom_smooth(method = "loess", se=FALSE, span=0.2) +
scale_colour_colorblind() +
labs(x = "$\\psi/^\\circ$", y = "Relative signal") +
ylim(c(0, 1)) +
theme(legend.position = "top",
legend.title = element_blank(),
text = element_text(size = 9))
print(plt_elliptical2)
df_ell <-  bind_rows(Wide = df_elliptical, Long = df_elliptical2, .id = 'Type')
N <- max(df_ell['I'])
plt_ell <- df_ell %>% mutate(aspect_ratio = as_factor(round(aspect_ratio))) %>%
ggplot(aes(x = psi, y = I/N, colour = aspect_ratio)) +
geom_smooth(method = "loess", se=FALSE, span=0.2, linewidth=1) +
facet_wrap(~Type, ncol = 1) +
scale_colour_colorblind(name = "Aspect ratio") +
labs(x = "$\\psi/^\\circ$", y = "Relative signal") +
ylim(c(0, 1)) +
theme(legend.position = "top",
#legend.title = element_blank(),
text = element_text(size = 9),
aspect.ratio = 2/(1+sqrt(5)))
plt_ell
if (save_tex) {
tikz("C:/Users/SamLambrick/Documents/SMF_research_work/figure_making_reports/constrast-to-noise-analytic/elliptical_apertures.tex", standAlone = FALSE, width = 3.287, height = 4.5)
print(plt_ell)
dev.off()
}
beta_range <- c(0, 90)
betas <- seq(beta_range[1], beta_range[2], by = 1)
# Calculate the standard deviation and differential contrast for each value of beta
df_sigma <- tibble(beta = NA, contrast = NA, av = NA)
df_diff <- tibble(beta = NA, contrast = NA, av = NA)
for (i in seq(1, length(betas))) {
df_oneBeta <- df_signal %>% filter(beta == betas[i], psi <= beta + 90)
sig <- sd(df_oneBeta[["I"]])
dif <- mean(abs(diff(df_oneBeta[["I"]])))
av <- mean(df_oneBeta[["I"]])
df_sigma %<>% add_row(beta = betas[i], contrast = sig, av = av)
df_diff %<>% add_row(beta = betas[i], contrast = dif, av = av)
}
df_sigma <- df_sigma[-1,]
df_diff <- df_diff[-1,]
# RMS and differential contrast to noise
df_sigma %<>% mutate(CNR = contrast/sqrt(av))
df_diff %<>% mutate(CNR = contrast/sqrt(av))
# Normalise such that a value of 1 is the present aperture size
N1 <- (df_sigma %>% filter(beta == present_half_cone))[["CNR"]]
N2 <- (df_diff %>% filter(beta == present_half_cone))[["CNR"]]
df_sigma %<>% mutate(CNR = CNR/N1)
df_diff %<>% mutate(CNR = CNR/N2)
# Normalise the contrast too
N1 <- (df_sigma %>% filter(beta == present_half_cone))[["contrast"]]
N2 <- (df_diff %>% filter(beta == present_half_cone))[["contrast"]]
df_sigma %<>% mutate(contrast = contrast/N1)
df_diff %<>% mutate(contrast = contrast/N2)
# Combine the RMS and differential contrast to noise
df_contrast <- bind_rows("sigma" = df_sigma, "diff" = df_diff, .id = "method")
# Add the equivalent signal increase
df_contrast %<>% mutate(signal_increase = CNR^2)
# Current solid angle
current_omega <- omegaEllipseBeta(10*pi/180, 10*pi/180)
# Range of angles in one of the dimensions
beta_a <- c(2, 3, 5, 10)
# Calculate the  values of the other half cone angle
beta_b <- rep(0, length(beta_a))
for (i in seq(1, length(beta_a))) {
beta_tmp <- seq(1, 89, by=0.2)
omegas <- rep(0, length(beta_tmp))
for (j in seq(1, length(beta_tmp))) {
omegas[j] <- omegaEllipseBeta(beta_a[i]*pi/180, beta_tmp[j]*pi/180)
}
tmp_fun <- approxfun(omegas, beta_tmp)
beta_b[i] <- tmp_fun(current_omega)
}
beta_range <- c(0, 90)
betas <- seq(beta_range[1], beta_range[2], by = 1)
# Calculate the standard deviation and differential contrast for each value of beta
df_sigma <- tibble(beta = NA, contrast = NA, av = NA)
df_diff <- tibble(beta = NA, contrast = NA, av = NA)
for (i in seq(1, length(betas))) {
df_oneBeta <- df_signal %>% filter(beta == betas[i], psi <= beta + 90)
sig <- sd(df_oneBeta[["I"]])
dif <- mean(abs(diff(df_oneBeta[["I"]])))
av <- mean(df_oneBeta[["I"]])
df_sigma %<>% add_row(beta = betas[i], contrast = sig, av = av)
df_diff %<>% add_row(beta = betas[i], contrast = dif, av = av)
}
df_sigma <- df_sigma[-1,]
df_diff <- df_diff[-1,]
# RMS and differential contrast to noise
df_sigma %<>% mutate(CNR = contrast/sqrt(av))
df_diff %<>% mutate(CNR = contrast/sqrt(av))
# Normalise such that a value of 1 is the present aperture size
N1 <- (df_sigma %>% filter(beta == present_half_cone))[["CNR"]]
N2 <- (df_diff %>% filter(beta == present_half_cone))[["CNR"]]
df_sigma %<>% mutate(CNR = CNR/N1)
df_diff %<>% mutate(CNR = CNR/N2)
# Normalise the contrast too
N1 <- (df_sigma %>% filter(beta == present_half_cone))[["contrast"]]
N2 <- (df_diff %>% filter(beta == present_half_cone))[["contrast"]]
df_sigma %<>% mutate(contrast = contrast/N1)
df_diff %<>% mutate(contrast = contrast/N2)
# Combine the RMS and differential contrast to noise
df_contrast <- bind_rows("sigma" = df_sigma, "diff" = df_diff, .id = "method")
# Add the equivalent signal increase
df_contrast %<>% mutate(signal_increase = CNR^2)
df_sigma
# Calculate the Contrast to noise and difference to noise between 0/45, 0/90,
# 45/90, for each beta
df_difference <- tibble(beta = NA, CNR = NA, I_0_45 = NA, I_0_90 = NA,
I_45_90 = NA)
for (i in seq(1, length(betas))) {
df_oneBeta <- df_signal %>% filter(beta == betas[i])
I_0 <- (df_oneBeta %>% filter(psi == 0))[["I"]]
I_45 <- (df_oneBeta %>% filter(psi == 45))[["I"]]
I_90 <- (df_oneBeta %>% filter(psi == 90))[["I"]]
df_difference %<>% add_row(beta = betas[i], CNR = "Difference",
I_0_45 = I_0 - I_45,
I_0_90 = I_0 - I_90,
I_45_90 = I_45 - I_90)
df_difference %<>% add_row(beta = betas[i], CNR = "DNR",
I_0_45 = diffNoise(I_0, I_45),
I_0_90 = diffNoise(I_0, I_90),
I_45_90 = diffNoise(I_45, I_90))
}
df_difference <- df_difference[-1,]
# Normalise so that the current set up at a surface of 45deg has a value of 1
# for the difference between 0/45
N1 <- (df_difference %>% filter(beta == present_half_cone,
CNR == "Difference"))[["I_0_45"]]
N2 <- (df_difference %>% filter(beta == present_half_cone,
CNR == "DNR"))[["I_0_45"]]
df_difference %<>% mutate(
I_0_45 = if_else(CNR == "Difference", I_0_45/N1, I_0_45/N2),
I_0_90 = if_else(CNR == "Difference", I_0_90/N1, I_0_90/N2),
I_45_90 = if_else(CNR == "Difference", I_45_90/N1, I_45_90/N2)
)
# Plot of the RMS contrst to noise and the standard deviation
facet_names <- c(
'CNR'="RMS contrast to noise",
'contrast'="RMS contrast"
)
leg_labs <- list(
'sigma'="RMS",
'diff'="Differential"
)
cs = colorblind_pal()(4)
plt_CNR_sig <- df_contrast %>%
gather(key = "variable", value = "value", -beta, -av, -method, -signal_increase) %>%
filter(method == "sigma") %>%
ggplot(aes(x = beta, y = value)) +
geom_line(colour = cs[3], linewidth=1) +
geom_vline(aes(xintercept = present_half_cone), colour = cs[1],
linewidth=1) +
scale_x_continuous(breaks = c(0,20,40,60,80)) +
facet_wrap( ~ variable, ncol = 1, scale = "free_y",
labeller = as_labeller(facet_names)) +
xlab(expression("Half cone angle/"*degree)) +
ylab("Normalised contrast") +
theme(aspect.ratio = 2/(1+sqrt(5)),
legend.position = "none",
text = element_text(size=9))
print(plt_CNR_sig)
# Plot the required signal increase
plt_signal_increase <- df_contrast %>%
filter(method == "sigma") %>%
ggplot(aes(x = beta, y = signal_increase)) +
geom_line(linewidth=1, , colour = cs[3]) +
geom_vline(aes(xintercept = present_half_cone), linewidth=1,colour = cs[1]) +
scale_x_continuous(breaks = c(0,20,40,60,80)) +
xlab(expression("Half cone angle/"*degree)) +
ylab("Equivalent overall signal increase") +
theme(aspect.ratio = 2/(1+sqrt(5)),
legend.title = element_blank(),
text = element_text(size=9))
print(plt_signal_increase)
# Plot the difference to noise and the difference
leg_labs <- list(
bquote(0^degree * "," ~ 45^degree),
bquote(0^degree * "," ~ 90^degree),
bquote(45^degree * "," ~ 90^degree)
)
plt_CNR_diff <- df_difference %>%
gather(key = "pair", value = "value", -beta, -CNR) %>%
ggplot(aes(x = beta, y = value, colour = pair)) +
geom_line(linewidth=1) +
geom_vline(aes(xintercept = present_half_cone)) +
scale_x_continuous(breaks = c(0,20,40,60,80)) +
scale_colour_colorblind(labels = leg_labs)  +
facet_wrap( ~ CNR, ncol = 1, scale = "free_y") +
xlab(expression("Half cone angle/"*degree)) +
ylab(NULL) +
theme(legend.title = element_blank(),
text = element_text(size=9),
legend.position='top')
plt_DNR <- df_difference %>%
gather(key = "pair", value = "value", -beta, -CNR) %>%
filter(CNR == "DNR") %>%
ggplot(aes(x = beta, y = value, colour = pair)) +
geom_line(linewidth=1) +
geom_vline(aes(xintercept = present_half_cone)) +
scale_x_continuous(breaks = c(0,20,40,60,80)) +
scale_colour_colorblind(labels = leg_labs)  +
xlab(expression("Half cone angle/"*degree)) +
ylab("Difference to noise ratio") +
theme(legend.title = element_blank(),
text = element_text(size=9),
legend.position='top',
aspect.ratio = 2/(1+sqrt(5)))
print(plt_CNR_diff)
print(plt_DNR)
df_contrast
betas
seq(0, 45)
# Data frame
df_pumping <- tibble(beta = rep(seq(0, 45), times = length(working_dists)),
working_dist = rep(working_dists, each = length(betas)))
# A function that gives the equivalent signal increase
df_tmp <- df_contrast %>% filter(method == 'sigma')
equiv_increase <- approxfun(df_tmp$beta, df_tmp$signal_increase)
cone_tmp <- function(beta, working_dist) {
#TODO: double check this against the CAD
Rk <- 3.6 # For all new designs in the 'new chamber' configuration
L <- 15.6 # for the 'new chamber' configuration
R0 <- working_dist*tan(beta*pi/180)
alpha <- atan((Rk - R0)/L)*180/pi
coneConductance(R0, Rk, L, alpha)
}
# Data frame
df_pumping <- tibble(beta = rep(seq(0, 45), times = length(working_dists)),
working_dist = rep(working_dists, each = length(betas)))
working_dists#
betas
# A function that gives the equivalent signal increase
df_tmp <- df_contrast %>% filter(method == 'sigma')
equiv_increase <- approxfun(df_tmp$beta, df_tmp$signal_increase)
cone_tmp <- function(beta, working_dist) {
#TODO: double check this against the CAD
Rk <- 3.6 # For all new designs in the 'new chamber' configuration
L <- 15.6 # for the 'new chamber' configuration
R0 <- working_dist*tan(beta*pi/180)
alpha <- atan((Rk - R0)/L)*180/pi
coneConductance(R0, Rk, L, alpha)
}
# Data frame
df_pumping <- tibble(beta = rep(seq(0,45), times = length(working_dists)),
working_dist = rep(working_dists, each = length(seq(0,45))))
# Calculate the pumping for the two methods
df_pumping %<>% mutate(aperture = apertureConductance(beta, working_dist))
df_pumping %<>% mutate(cone = cone_tmp(beta, working_dist))
df_pumping %>% pivot_longer(c('aperture', 'cone'), names_to="method", values_to = "conductance") %>%
filter(working_dist == 0.5) %>%
ggplot(aes(x = beta, y = conductance, colour = method)) +
geom_line() +
ylim(-1,1)
#TODO: I think the cone formula breaks down at some point....
# A function that gives the equivalent signal increase
df_tmp <- df_contrast %>% filter(method == 'sigma')
equiv_increase <- approxfun(df_tmp$beta, df_tmp$signal_increase)
cone_tmp <- function(beta, working_dist) {
#TODO: double check this against the CAD
Rk <- 3.6 # For all new designs in the 'new chamber' configuration
L <- 15.6 # for the 'new chamber' configuration
R0 <- working_dist*tan(beta*pi/180)
alpha <- atan((Rk - R0)/L)*180/pi
coneConductance(R0, Rk, L, alpha)
}
# Data frame
df_pumping <- tibble(beta = rep(seq(0,45), times = length(working_dists)),
working_dist = rep(working_dists, each = length(seq(0,45))))
# Calculate the pumping for the two methods
df_pumping %<>% mutate(aperture = apertureConductance(beta, working_dist))
df_pumping %<>% mutate(cone = cone_tmp(beta, working_dist))
df_pumping %>% pivot_longer(c('aperture', 'cone'), names_to="method", values_to = "conductance") %>%
filter(working_dist == 0.5) %>%
ggplot(aes(x = beta, y = conductance, colour = method)) +
geom_line()
#TODO: I think the cone formula breaks down at some point....
Cb <- seq(0.01, 3, by=0.01)
df <- tibble(Cb = Cb)
df %<>% mutate(p = p(Cd, Cb))
p <- function(Cd, Cb) Cd/(Cd + Cb)
Cb <- seq(0.01, 3, by=0.01)
df <- tibble(Cb = Cb)
df %<>% mutate(p = p(Cd, Cb))
p <- function(Cd, Cb) Cd/(Cd + Cb)
Cb <- seq(0.01, 3, by=0.01)
df <- tibble(Cb = Cb, Cd=1)
df %<>% mutate(p = p(Cd, Cb))
df %>% ggplot(aes(x=Cb, y=p)) +
geom_line() +
ylim(0, 1) +
xlab('Cb/Cd')
p <- function(Cd, Cb) Cd/(Cd + Cb)
Cb <- seq(0.01, 3, by=0.01)
df <- tibble(Cb = Cb, Cd=1)
df %<>% mutate(p = p(Cd, Cb))
df %>% ggplot(aes(x=Cb, y=p)) +
geom_line() +
ylim(0, 1) +
labs(x='C_b/C_d', y='Proportion of siganl detected')
df_contrast
df_pumping
df_pumping %>% filter(working_dist == 1)
df_pumping %>% filter(working_dist == 3)
working_dists
df_pumping %>% filter(working_dist >= 3)
df_pumping %>% filter(working_dist == 3)
df_pumping %>% filter(working_dist > 2.99 & working_dist < 3.01)
